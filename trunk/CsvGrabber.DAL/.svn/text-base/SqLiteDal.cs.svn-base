using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Data.SQLite;
using System.Collections;
using System.IO;
using System.Globalization;
using System.Xml.Linq;
using CsvGrabber.Core;

namespace CsvGrabber.DAL {
    public class SqLiteDal : ADONETBase
    {
        public SqLiteDal()
        {
            this.FileName = DalConfigurationManager.DatabasePath;
        }

        public SqLiteDal(string fileName)
        {
            this.FileName = fileName;
        }

        #region Grab Jobs
        public void AddScheduledGrabs(IEnumerable<ScheduledGrab> grabs)
        {
            Execute(conn =>
            {
                using (SQLiteTransaction trans = conn.BeginTransaction()) {
                    using(SQLiteCommand cmd = conn.CreateCommand()){
                        cmd.CommandText = "INSERT INTO ScheduledGrabs (Interval, Name, IsActive, Schedule, Mode, Parameters) VALUES (@Interval, @Name, @IsActive, @Schedule, @Mode, @Parameters)";
                        cmd.Parameters.AddWithValue("@Interval", 0);
                        cmd.Parameters.AddWithValue("@Name", string.Empty);
                        cmd.Parameters.AddWithValue("@IsActive", false);
                        cmd.Parameters.AddWithValue("@Schedule", 0);
                        cmd.Parameters.AddWithValue("@Mode", 0);
                        cmd.Parameters.AddWithValue("@Parameters", string.Empty);

                        foreach(ScheduledGrab grab in grabs) {
                            cmd.Parameters["@Interval"].Value = grab.Interval;
                            cmd.Parameters["@Name"].Value = grab.Name;
                            cmd.Parameters["@IsActive"].Value = grab.IsActive;
                            cmd.Parameters["@Schedule"].Value = grab.GrabSchedule;
                            cmd.Parameters["@Mode"].Value = grab.GrabMode;
                            cmd.Parameters["@Parameters"].Value = grab.GrabParams.Serialize();
                            cmd.ExecuteNonQuery();
                        }
                    }
                    trans.Commit();
                }
                    });
        }

        public void EditScheduledGrab(ScheduledGrab grab)
        {
            Execute(conn =>
            {
                using (SQLiteCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "UPDATE ScheduledGrabs SET Interval  = @Interval, Name = @Name, IsActive = @IsActive, Schedule = @Schedule, Mode = @Mode, Parameters = @Parameters WHERE GrabID = @GrabID";
                    cmd.Parameters.AddWithValue("@GrabID", grab.GrabID);
                    cmd.Parameters.AddWithValue("@Interval", grab.Interval);
                    cmd.Parameters.AddWithValue("@Name", grab.Name);
                    cmd.Parameters.AddWithValue("@IsActive", grab.IsActive);
                    cmd.Parameters.AddWithValue("@Schedule", grab.GrabSchedule);
                    cmd.Parameters.AddWithValue("@Mode", grab.GrabMode);
                    cmd.Parameters["@Parameters"].Value = grab.GrabParams.Serialize();
                    cmd.ExecuteNonQuery();
                }
            });
        }

        public void DeleteScheduledGrab(ScheduledGrab grab)
        {
            Execute(conn =>
            {
                using (SQLiteCommand cmd = conn.CreateCommand())
                {
                    cmd.Parameters.AddWithValue("@GrabID", grab.GrabID);

                    cmd.CommandText = "DELETE FROM GrabHistory WHERE GrabID = @GrabID";
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = "DELETE FROM ScheduledGrabs WHERE GrabID = @GrabID";
                    cmd.ExecuteNonQuery();
                }
            });
        }
        public List<ScheduledGrab> GetScheduledGrabs()
        {
            return GetScheduledGrabs(null);
        }

        public List<ScheduledGrab> GetScheduledGrabs(bool? onlyActive)
        {
            List<ScheduledGrab> jobs = new List<ScheduledGrab>();
            Execute(conn =>
            {
                using (SQLiteCommand cmd = conn.CreateCommand()) {
                    StringBuilder cmdBuffer = new StringBuilder("SELECT * FROM ScheduledGrabs ");

                    bool firstClause = true;
                    if (onlyActive.HasValue) {
                        cmdBuffer.Append(firstClause ? " WHERE" : " AND");
                        firstClause = false;
                        cmdBuffer.Append("  IsActive = @IsActive");
                        cmd.Parameters.AddWithValue("@IsActive", onlyActive.Value);
                    }
                    cmd.CommandText = cmdBuffer.ToString();
                    cmd.ExecuteNonQuery();

                    SQLiteDataReader reader = cmd.ExecuteReader();
                    while (reader.Read()) {
                        try {
                            ScheduledGrab grab = GetScheduledGrab(reader);
                            jobs.Add(grab);
                        } catch (Exception ex) {
                            Console.WriteLine("Error loading job:" + ex.Message);
                        }
                    }
                    reader.Close();
                }
            });
            return jobs;
        }

        private ScheduledGrab GetScheduledGrab(SQLiteDataReader reader)
        {
            ScheduledGrab grab = new ScheduledGrab()
            {
                GrabID = Convert.ToInt32(reader["GrabID"]),
                GrabParams = GrabEventArgs.Deserialize(Convert.ToString(reader["Parameters"])),
                GrabMode = (Constants.GrabModes)Enum.Parse(typeof(Constants.GrabModes), Convert.ToString(reader["Mode"]), true),
                GrabSchedule = (Constants.GrabSchedules)Enum.Parse(typeof(Constants.GrabSchedules), Convert.ToString(reader["Schedule"]), true),
                Interval = Convert.ToInt32(reader["Interval"]),
                IsActive = Convert.ToChar(reader["IsActive"]) == '1',
                Name = Convert.ToString(reader["Name"]),
            };
            return grab;
        }
        #endregion

        #region Grab History
        public void AddJobHistory(IEnumerable<GrabbedJob> grabbedJobs)
        {
            Execute(conn =>
            {
                using (SQLiteTransaction trans = conn.BeginTransaction()) {
                    using (SQLiteCommand cmd = conn.CreateCommand())
                    using (SQLiteCommand cmdDisArm = conn.CreateCommand()) {
                        cmdDisArm.CommandText = "UPDATE ScheduledGrabs SET IsArmed = 'false' WHERE GrabID = @GrabID)";
                        cmdDisArm.Parameters.AddWithValue("@GrabID", 0);
                        cmd.CommandText = "INSERT INTO ScheduledGrabs (ItemID, GrabID, Result, ResultCode, GrabDate) VALUES (@ItemID, @GrabID, @Result, @ResultCode, @GrabDate)";
                        cmd.Parameters.AddWithValue("@ItemID", 0);
                        cmd.Parameters.AddWithValue("@GrabID", string.Empty);
                        cmd.Parameters.AddWithValue("@Result", false);
                        cmd.Parameters.AddWithValue("@ResultCode", 0);
                        cmd.Parameters.AddWithValue("@GrabDate", 0);

                        foreach (GrabbedJob grabbedJob in grabbedJobs) {
                            cmd.Parameters["@ItemID"].Value = grabbedJob.ItemID;
                            cmd.Parameters["@GrabID"].Value = grabbedJob.ScheduledGrab.GrabID;
                            cmd.Parameters["@Result"].Value = grabbedJob.Response.ParsedResponse;
                            cmd.Parameters["@ResultCode"].Value = grabbedJob.Result;
                            cmd.Parameters["@GrabDate"].Value = grabbedJob.GrabDate;
                            cmd.ExecuteNonQuery();

                            switch (grabbedJob.ScheduledGrab.GrabSchedule) {
                                case Constants.GrabSchedules.OneTime:
                                    cmdDisArm.Parameters["@GrabID"].Value = grabbedJob.ScheduledGrab.GrabID;// only set to run once, disarm it
                                    cmdDisArm.ExecuteNonQuery();
                                    break;
                            }
                        }
                    }
                    trans.Commit();
                }
            });
        }
        #endregion

        #region Templates
        public List<GrabTemplate> GetTemplates() {
            List<GrabTemplate> items = new List<GrabTemplate>();
            Execute(conn =>
            {
                using (SQLiteCommand cmd = conn.CreateCommand()) {
                    StringBuilder cmdBuffer = new StringBuilder("SELECT * FROM GrabTemplates ");
                    //bool firstClause = true;
                    //if (onlyActive.HasValue) {
                    //    cmdBuffer.Append(firstClause ? " WHERE" : " AND");
                    //    firstClause = false;
                    //    cmdBuffer.Append("  IsActive = @IsActive");
                    //    cmd.Parameters.AddWithValue("@IsActive", onlyActive.Value);
                    //}
                    cmd.CommandText = cmdBuffer.ToString();
                    cmd.ExecuteNonQuery();

                    SQLiteDataReader reader = cmd.ExecuteReader();
                    while (reader.Read()) {
                        try {
                            GrabTemplate template = GetGrabTemplate(reader);
                            items.Add(template);
                        } catch (Exception ex) {
                            Console.WriteLine("Error loading job:" + ex.Message);
                        }
                    }
                    reader.Close();
                }
            });
            return items;
        }

        private GrabTemplate GetGrabTemplate(SQLiteDataReader reader)
        {
            return new GrabTemplate()
                       {
                           Name = Convert.ToString(reader["Name"]),
                           Description = Convert.ToString(reader["Description"]),
                           TemplateID = Convert.ToInt32(reader["TemplateID"]),
                           UrlFormatString = Convert.ToString(reader["UrlFormatString"]),
                           GrabParameters = GrabEventArgs.Deserialize(Convert.ToString(reader["GrabParameters"]))
                       };
        }

        #endregion

        #region Database Maintenance
        /// <summary>
        /// Creates a database and required tables.
        /// </summary>
        public override bool CreateDatabase()
        {
            bool created = false;
            FileInfo dbFile = new FileInfo(FileName);
            if(!dbFile.Directory.Exists) {
                if(!dbFile.Directory.Parent.Exists)
                    dbFile.Directory.Parent.Create();
                dbFile.Directory.Create();
            }
            SQLiteConnection.CreateFile(FileName);
            CreateTables();
            created = true;
            return created;
        }

        public void CreateTables()
        {
            Execute(conn =>
            {
                using (SQLiteCommand cmd = conn.CreateCommand()) {
                    cmd.CommandText = @"CREATE TABLE ScheduledGrabs (
							GrabID INTEGER PRIMARY KEY AUTOINCREMENT,
                            Interval TEXT(10) NOT NULL,
                            Name TEXT(255) NOT NULL,
                            IsActive TEXT,
                            Schedule INTEGER,
                            Mode INTEGER,
                            Parameters TEXT
                        );
                        CREATE TABLE GrabHistory (
                            ItemID INTEGER PRIMARY KEY AUTOINCREMENT,
                            GrabID INTEGER NOT NULL,
                            Result TEXT NOT NULL COLLATE NOCASE,
                            ResultCode INTEGER NOT NULL,
                            GrabDate DATETIME
                        );
                        CREATE TABLE GrabHistory (
                            TemplateID INTEGER PRIMARY KEY AUTOINCREMENT,
                            Name(255) TEXT,
                            Description TEXT, 
                            UrlFormatString(255) TEXT NOT NULL,
                            GrabParameters  TEXT
                        );
                        ";
                    cmd.ExecuteNonQuery();
                }
            });
        }
        #endregion
    }
}